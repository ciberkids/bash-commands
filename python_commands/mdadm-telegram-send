#!/bin/python
import sh
import sys
import socket

# Get command-line arguments (event, md_device, device)
if len(sys.argv) != 4:
    print("Usage: {} <event> <md_device> <device>".format(sys.argv[0]))
    sys.exit(1)

event = sys.argv[1]
md_device = sys.argv[2]
device = sys.argv[3]

# Get the hostname of the machine
hostname = socket.gethostname()

# Based on the event, construct our notify message
case_mapping = {
    "DegradedArray": lambda: f"{hostname}: {md_device} is running in DEGRADED MODE",
    "DeviceDisappeared": lambda: f"{hostname}: {md_device} has DISAPPEARED",
    "Fail": lambda: f"{hostname}: {md_device} had an ACTIVE component FAIL ({device})",
    "FailSpare": lambda: f"{hostname}: {md_device} had a SPARE component FAIL during rebuild ({device})",
    "MoveSpare": lambda: f"SPARE device {device} has been MOVED to a new array on {hostname}",
    "NewArray": lambda: f"{hostname}: {md_device} has APPEARED",
    "Rebuild??": lambda x: f"{hostname}: {md_device} REBUILD is now {x}% complete",
    "RebuildFinished": lambda: f"REBUILD of {md_device} on {hostname} is COMPLETE or ABORTED",
    "RebuildStarted": lambda: f"RECONSTRUCTION of {md_device} on {hostname} has STARTED",
    "SpareActive": lambda: f"{device} has become an ACTIVE COMPONENT of {md_device} on {hostname}",
    "SparesMissing": lambda: f"{md_device} is MISSING one or more SPARE devices on {hostname}",
    "TestMessage": lambda: f"TEST MESSAGE generated for {md_device} on {hostname}",
}

msg = case_mapping.get(event, lambda: f"{hostname}: Unknown event: {event}")()

# Now that we have our message, send it to the sys admin.
# (in this example, we send it as an SMS to a Verizon phone)
telegram_send = sh.telegram_send.bake(msg)
try:
    telegram_send()
except sh.ErrorReturnCode_1 as e:
    print(f"Error sending Telegram message: {e}")
