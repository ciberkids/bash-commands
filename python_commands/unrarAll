#!/usr/bin/env python3
import os
import re
import sh
import shutil

import argparse
import tempfile


def print_description():
    print("""
    This script is a utility for handling .rar and .rev files. It provides functionality to test, extract, and delete these files.
    The script uses the argparse library to handle command-line arguments, which are used to set the flags for the unrar_all() function.
    - The --dry-run flag: If set, no files will be deleted.
    - The --keep-tmpdir flag: If set, the temporary directory will not be deleted.
    - The --debug flag: If set, print the commands being run.
    """)


def run_command(cmd, debug):
    if debug:
        print("Running command:", " ".join(cmd))
    return sh.Command(cmd[0])(*cmd[1:])


def print_output(output, label):
    print(f"----- BEGIN {label} OUTPUT -----")
    print(output)
    print(f"------ END {label} OUTPUT ------\n")


def test_file(file, debug):
    print("-----------------------")
    print(f"Testing file: '{file}'")
    try:
        cmd = ['unrar', 't', file]
        output = run_command(cmd, debug)
        print_output(output, "UNRAR TEST")

    except sh.ErrorReturnCode as e:
        print(f"Test and recover rar file: '{file}' failed: {e}")
        return False
    return True

def extract_file(file, keep_tmpdir, debug):
    
    print("-----------------------")
    print(f"Extracting file: '{file}'")
    try:
        # Create a unique temporary directory
        tmpdirname = tempfile.mkdtemp(dir="./")
        if keep_tmpdir:
            print(f"WARNING: Running with --keep-tmpdir. Temporary directory {tmpdirname} will not be deleted.")

        try:
            # Extract files into the temporary directory
            cmd = ['unrar', 'x', file, tmpdirname]
            output = run_command(cmd, debug)
            
            print_output(output, "UNRAR EXTRACTION")

            # Check if the temporary directory is empty
            if not os.listdir(tmpdirname):
                print(f"No files were extracted from: '{file}'")
                return False

            # Move the extracted files to the current directory
            for filename in os.listdir(tmpdirname):
                shutil.move(os.path.join(tmpdirname, filename), filename)

        finally:
            # Always remove the temporary directory, unless --keep-tmpdir is set
            if not keep_tmpdir:
                shutil.rmtree(tmpdirname)

    except sh.ErrorReturnCode as e:
        print(f"Extraction of file: '{file}' failed: {e}")
        return False

    return True



def delete_files(file, dry_run):
    print("Printing Regex")
    to_delete = re.sub(r'.part.*$', '', file).replace('./', '')
    to_delete_regex = f".*({to_delete}){{1}}.*\\.(rar|rev)"
    print(f"regex: {to_delete_regex}")

    files_to_delete = [f for f in os.listdir('.') if re.match(to_delete_regex, f)]

    for f_del in files_to_delete:
        print(f"deleting '{f_del}'")
        if not dry_run:
            os.remove(f_del)

def find_files():
    files_dict = {}
    for f in os.listdir('.'):
        match = re.match(r'^(.*\.part)([0-9]*)(\.rar|\.rev)$', f)
        if match:
            base_name, part_number, extension = match.groups()
            part_number = int(part_number)
            if base_name not in files_dict or part_number < files_dict[base_name][1]:
                files_dict[base_name] = (f, part_number)
    return [f[0] for f in files_dict.values()]

def unrar_all(dry_run, keep_tmpdir, debug):
    if dry_run:
        print("WARNING: Running in dry-run mode. No files will be deleted.")
    if keep_tmpdir:
        print("WARNING: Running with --keep-tmpdir. Temporary directories will not be deleted.")

    print("Unrar All file starting from number part[0].rar")

    files = find_files()

    print(f"{len(files)} file(s) found")

    for file in files:
        print(f"File to elaborate: '{file}'")

        if not test_file(file, debug):
            return 1

        if extract_file(file, keep_tmpdir, debug):
            delete_files(file, dry_run)
        else:
            return 1

    return 0

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Unrar and delete files.')
    
    parser.add_argument('--dry-run', action='store_true', help='If set, no files will be deleted.')
    parser.add_argument('--keep-tmpdir', action='store_true', help='If set, the temporary directory will not be deleted.')
    parser.add_argument('--debug', action='store_true', help='If set, print the commands being run.')
    parser.add_argument('--describe', action='store_true', help='Print a description of the script and exit')

    args = parser.parse_args()
    
    if args.describe:
      print_description()
      exit(0)

    exit_code = unrar_all(args.dry_run, args.keep_tmpdir, args.debug)
    exit(exit_code)
