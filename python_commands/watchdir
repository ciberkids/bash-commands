#!/usr/bin/env python3

import sys
import os
import time
import atexit
import argparse
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class MyHandler(FileSystemEventHandler):
    def on_created(self, event):
        print(f'New file {event.src_path} has been created')

def on_exit(observer):
    print('Service is stopping...')
    observer.stop()
    
def print_description():
    print("""
    This script monitors a directory for any new files that are created.
    It uses the watchdog library to achieve this.

    When a new file is created in the monitored directory, it prints a message
    indicating the path of the newly created file.

    The script runs indefinitely until stopped with Ctrl+C or if an error occurs.
    """)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--directory', help='Directory to monitor')
    parser.add_argument('--describe', action='store_true', help='Print a description of the script and exit')
    args = parser.parse_args()

    if args.describe:
        print_description()
        sys.exit(0)

    if args.directory is None or not os.path.isdir(args.directory):
        print('Please provide a valid directory as a parameter')
        sys.exit(1)

    path = args.directory
    event_handler = MyHandler()
    observer = Observer()
    observer.schedule(event_handler, path, recursive=True)
    observer.start()

    atexit.register(on_exit, observer)

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print('Ctrl+C has been pressed, stopping the service...')
        observer.stop()
    except Exception as e:
        print(f'An error occurred: {e}')
        observer.stop()
    observer.join()
